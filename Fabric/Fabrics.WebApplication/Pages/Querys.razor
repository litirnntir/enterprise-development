@page "/queries"
@using MudBlazor
@inject ServerApi Api

<h2>Queries</h2>

<MudExpansionPanels MultiExpansion="true">
    <!-- Query 1: Shipments by Provider ID -->
    <MudExpansionPanel Text="Query 1: Display shipments by provider ID">
        <div class="input-container">
            <div class="mb-3">
                <MudTextField id="providerId" Label="Provider ID" @bind-Value="_providerId" />
            </div>
        </div>
        <div class="button-container">
            
            <button type="submit" class="btn btn-success" @onclick="@(() => ClickHandler(1))">Get result</button>
            <button type="button" class="btn btn-secondary" @onclick="@(() => ClearTask(1))">Clear</button>
        </div>
        <div class="table-container">
            @if (shipments != null)
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Shipment ID</th>
                            <th>Fabric ID</th>
                            <th>Provider ID</th>
                            <th>Date</th>
                            <th>Number of Goods</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var shipment in shipments)
                        {
                            <tr>
                                <td>@shipment.Id</td>
                                <td>@shipment.FabricId</td>
                                <td>@shipment.ProviderId</td>
                                <td>@shipment.Date.ToString("yyyy-MM-dd")</td>
                                <td>@shipment.NumberOfGoods</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p class="no-data">No data available.</p>
            }
        </div>
    </MudExpansionPanel>

    <!-- Query 2: Providers by Date Range -->
    <MudExpansionPanel Text="Query 2: Display providers by date range">
        <div class="input-container">
            <div class="mb-3">
                <MudDatePicker id="startDate" Label="Start Date" @bind-Date="_startDate" Editable="true" />
            </div>
            <div class="mb-3">
                <MudDatePicker id="endDate" Label="End Date" @bind-Date="_endDate" Editable="true" />
            </div>
        </div>
        <div class="button-container">
            <button type="submit" class="btn btn-success" @onclick="@(() => ClickHandler(2))">Get result</button>
            <button type="button" class="btn btn-secondary" @onclick="@(() => ClearTask(2))">Clear</button>
        </div>
        <div class="table-container">
            @if (providers != null)
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Provider ID</th>
                            <th>Name</th>
                            <th>Type Of Goods</th>
                            <th>Address</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var provider in providers)
                        {
                            <tr>
                                <td>@provider.Id</td>
                                <td>@provider.Name</td>
                                <td>@provider.TypeOfGoods</td>
                                <td>@provider.Address</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p class="no-data">No data available.</p>
            }
        </div>
    </MudExpansionPanel>
</MudExpansionPanels>

@code {
    private List<ShipmentGetDto> shipments = null!;
    private List<ProviderGetDto> providers = null!;
    private int _providerId;
    private DateTime? _startDate;
    private DateTime? _endDate;

    private async Task ClickHandler(int taskId)
    {
        try
        {
            switch (taskId)
            {
                case 1:
                    shipments = (List < ShipmentGetDto >) await Api.ShipmentsByProviderAsync(_providerId);
                    break;
                case 2:
                    if (_startDate.HasValue && _endDate.HasValue)
                    {
                        providers = (List<ProviderGetDto>)await Api.ProvidersByDateAsync(_startDate, _endDate);
                    }
                    break;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data for Query {taskId}: {ex.Message}");
        }
    }

    private void ClearTask(int taskId)
    {
        switch (taskId)
        {
            case 1: shipments = null!; break;
            case 2: providers = null!; break;
        }
    }

    public class ShipmentGetDto
    {
        public int Id { get; set; }
        public int FabricId { get; set; }
        public int ProviderId { get; set; }
        public DateTime Date { get; set; }
        public int NumberOfGoods { get; set; }
    }

    public class ProviderGetDto
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string TypeOfGoods { get; set; } = string.Empty;
        public string Address { get; set; } = string.Empty;
    }
}